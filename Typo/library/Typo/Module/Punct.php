<?php

namespace Typo\Module;

use Typo\Module;

/**
 * Пунктуация.
 *
 * @link http://wikipedia.org/wiki/Punctuation
 */
class Punct extends Module
{
    /**
     * Настройки по умолчанию.
     *
     * @var array
     */
    protected $default_options = array(
        /**
         * @var bool Исправление пробелов возле пунктуации.
         */
        'spaces' => true,

        /**
         * @var bool Автоматическая расстановка пунктуации.
         */
        'auto' => false,
    );

    /**
     * Приоритет выполнения стадий.
     *
     * @var array
     */
    static public $order = array(
        'A' => 0,
        'B' => 20,
        'C' => 0,
        'D' => 0,
        'E' => 0,
        'F' => 0,
    );


    // --- Открытые методы класса ---

    /**
     * Стадия B.
     *
     * Применяет правила для расстановки пунктуации в тексте.
     *
     * @return void
     */
    protected function stageB()
    {
        $s =& $this->typo->chars;

        $helpers = array(
            '{s1}' => '(?:\!{t}*|\?{t}*|\.{t}*)',
            '{^p}' => '[^!?:;,.]',
        );

        $rules = array(
            'spaces' => array(
                // Убираем лишние пробелы
                '~(?<={p})({t}*)\h+(?=(({t}|\h)*){p})~' => '$1',
                '~(?<=^|\n|\)|{a}|\]\]\])({t}*)\h+(?=(({t}|\h)*){p})~u' => '$1',

                // Добавляем недостающие пробелы
                '~(?<=^|\n|\)|{a}|\]\]\])((?:{t}*{p}{t}*)+)\h*(?={t}*(\(|[a-zа-яё]|{b}))~iu' => '$1 ',
                '~([,\.]{t}*)-~' => '$1 -',

                // Оторвать скобку от слова
                // @todo: "text  (" => "text (". "text.  (" => "text. ("
                '~((?:\)|{a}|\]\]\]){t}*)\(~u' => '$1 (',
                '~\)({t}*(?:\(|{a}|{b}))~u' => ') $1',
            ),

            // Замена  двух знаков "..", "?.", "!." на три "...", "?..", "!.."
            '~(?<=^|\n|\)|{a}|\]\]\])({t}*[!?\.]{t}*)\.(?!{t}*{p})~u' => '$1..',

            // Замена двух одинаковх знаков на один
            '~(?<=^|\n|\)|{a}|\]\]\])({t}*)({p})({t}*)\\2(?!{t}*{p})~u' => '$1$2$3$4',

            // Замена "!?" на "?!"
            '~(?<=^|\n|\)|{a}|\]\]\])({t}*)\!({t}*)\?(?!{t}*{p})~u' => '$1?$2!',

            // Оставляем 3 знака ("???", "?!!", "?.." и т. п.) вместо 4 или 5
            '~(?<=^|\n|\)|{a}|\]\]\])({t}*{s1}{3}){s1}{1,2}(?!{p})~u' => '$1',

            // Заменяем три точки на знак многоточия
            '~(?<=^|\n|\)|{a}|\]\]\])({t}*)\.{3}(?!{t}*{p})~u' => '$1' . $s['hellip'],

            // Убираем лишние запятые, двоеточия и точки с запятой
            '~([,:;]){2,}~' => '$1',

            'auto' => array(
                // Расстановка запятых перед союзами "а" и "но"
                '~({a}|{b})\h(но|а)(?=\h)~u' => '$1, $2',

                // Добавление забытой точки в конце текста
                '~({a}{t}*)$~u' => '$1.',
            ),

            // Пробел после тире в начале строки
            # '~(?<=^|\n)({t}*--?{t}*)(?![\h\-])~' => '$1- ',

            // Длинное тире
            '~(?<=\h)({t}*)--?(?={t}*\h)~' => '$1' . $s['ndash'],
        );

        $this->applyRules($rules, $helpers);
    }
}